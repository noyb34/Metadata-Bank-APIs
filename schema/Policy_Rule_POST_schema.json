{
  "required": [
    "Rule"
  ],
  "errorMessage": {
    "type": "The request should be an object",
    "required": {
      "Rule": "Rule is Required"
    }
  },
  "type": "object",
  "properties": {
    "Rule": {
      "title": "The Rule Schema",
      "required": [
        "MediaContext",
        "PlayType"
      ],
      "errorMessage": {
        "type": "Rule must be an object",
        "required": {
          "MediaContext": "MediaContext is Required",
          "PlayType": "PlayType is Required",
          "Type": "Type is Required"
        }
      },
      "type": "object",
      "properties": {
        "PlayType": {
          "pattern": "^(.*)$",
          "type": "string",
          "errorMessage": {
            "type": "PlayType must be a String"
          }
        },
        "Trigger": {
          "type": "object",
          "dependencies": {
            "StartOperator": [
              "StartEvent"
            ],
            "EndOperator": [
              "EndEvent"
            ]
          },
          "errorMessage": {
            "type": "Trigger must be an object",
            "dependencies": {
              "StartOperator": "StartEvent is required, if StartOperator is present",
              "EndOperator": "EndEvent is required, if EndOperator is present"
            }
          },
          "properties": {
            "StartCount": {
              "type": "integer",
              "format": "int32",
              "errorMessage": {
                "type": "StartCount must be an Integer",
                "format": "StartCount must be in format int32"
              }
            },
            "StartUnitType": {
              "transform": [
                "trim",
                "toEnumCase"
              ],
              "type": "string",
              "enum": [
                "weeks",
                "days",
                "months",
                "hours"
              ],
              "errorMessage": {
                "type": "StartUnitType must be a String",
                "enum": "StartUnitType must be one of the given values - weeks, days, months or hours"
              }
            },
            "StartOperator": {
              "transform": [
                "trim",
                "toEnumCase"
              ],
              "type": "string",
              "enum": [
                "On",
                "Before",
                "After",
                "During"
              ],
              "errorMessage": {
                "type": "StartOperator must be a String",
                "enum": "StartOperator must be one of the given values - On, Before, After or During"
              }
            },
            "StartEvent": {
              "transform": [
                "trim",
                "toEnumCase"
              ],
              "type": "string",
              "enum": [
                "After Each Broadcast",
                "After Earliest Release",
                "Earliest Release of Any Episode",
                "Earliest Release of Each Episode",
                "On Earliest Release of Any Episode",
                "On Earliest Release of Each Episode",
                "Each Episode",
                "Earliest Episode",
                "Latest Episode",
                "Rule End",
                "Each Airing *Includes First Airing",
                "Each Repeat *Subsequent Airings",
                "First Airing",
                "Second Airing",
                "Third Airing",
                "Fourth Airing",
                "Each Airing *Includes First Airing Each Episode",
                "Each Airing *Includes First Airing Earliest Episode",
                "Each Airing *Includes First Airing Latest Episode",
                "Each Airing *Includes First Airing Rule End",
                "Each Repeat *Subsequent Airings Each Episode",
                "Each Repeat *Subsequent Airings Earliest Episode",
                "Each Repeat *Subsequent Airings Latest Episode",
                "Each Repeat *Subsequent Airings Rule End"
              ],
              "errorMessage": {
                "type": "StartEvent must be a String",
                "enum": "StartEvent must be one of the given values - After Each Broadcast, After Earliest Release, Earliest Release of Any Episode, Earliest Release of Each Episode, On Earliest Release of Any Episode, On Earliest Release of Each Episode, Each Episode, Earliest episode, Latest Episode, Rule End, Each Airing *Includes First Airing, Each Repeat *Subsequent Airings, First Airing, Second Airing, Third Airing or Fourth Airing, Each Airing *Includes First Airing Each Episode, Each Airing *Includes First Airing Earliest Episode, Each Airing *Includes First Airing Latest Episode, Each Airing *Includes First Airing Rule End, Each Repeat *Subsequent Airings Each Episode, Each Repeat *Subsequent Airings Earliest Episode, Each Repeat *Subsequent Airings Latest Episode, Each Repeat *Subsequent Airings Rule End"
              }
            },
            "TimeInterval": {
              "type": "array",
              "errorMessage": {
                "type": "TimeInterval must be an Array"
              },
              "items": {
                "type": "integer",
                "format": "int32",
                "errorMessage": {
                  "type": "item must be an Integer",
                  "format": "item must be in format int32"
                }
              }
            },
            "EndCount": {
              "type": "integer",
              "format": "int32",
              "errorMessage": {
                "type": "EndCount must be an Integer",
                "format": "EndCount must be in format int32"
              }
            },
            "EndUnitType": {
              "transform": [
                "trim",
                "toEnumCase"
              ],
              "type": "string",
              "enum": [
                "weeks",
                "days",
                "months",
                "hours"
              ],
              "errorMessage": {
                "type": "EndUnitType must be a String",
                "enum": "EndUnitType must be one of the given values - weeks, days, months or hours"
              }
            },
            "EndOperator": {
              "transform": [
                "trim",
                "toEnumCase"
              ],
              "type": "string",
              "enum": [
                "On",
                "Before",
                "After",
                "During"
              ],
              "errorMessage": {
                "type": "EndOperator must be a String",
                "enum": "EndOperator must be one of the given values - On, Before, After or During"
              }
            },
            "EndEvent": {
              "transform": [
                "trim",
                "toEnumCase"
              ],
              "type": "string",
              "enum": [
                "Rights End",
                "Each Episode",
                "Earliest episode",
                "Latest Episode",
                "Rule End",
                "Each Episode Rights End",
                "Earliest Episode Rights End",
                "Latest Episode Rights End"
              ],
              "errorMessage": {
                "type": "EndEvent must be a String",
                "enum": "EndEvent must be one of the given values - Rights End, Each Episode, Earliest episode, Latest Episode or Rule End, Each Episode Rights End, Earliest Episode Rights End, Latest Episode Rights End"
              }
            }
          }
        },
        "MediaContext": {
          "type": "array",
          "errorMessage": {
            "type": "MediaContext must be an Array"
          },
          "items": {
            "transform": [
              "trim",
              "toEnumCase"
            ],
            "type": "string",
            "enum": [
              "Television",
              "Linear",
              "Linear Streaming",
              "Linear Streaming -- Non-Commercial",
              "Linear Streaming -- Commercial",
              "Broadcast",
              "Broadcast -- Non-Commercial",
              "Broadcast -- Commercial",
              "Linear TV -- Pay",
              "Linear TV -- Pay Premium",
              "Digital Multicast Distribution",
              "Audio Visual/Education/Non-Theatrical",
              "FVOD",
              "FVOD - All Sites/Services",
              "FVOD - Streaming (Internet)",
              "FVOD - MSO and Auth. Providers/TVE - Apps",
              "FVOD - MSO only",
              "FVOD - PBS Branded Services",
              "PBS Branded - FVOD - Streaming (Internet)",
              "PBS Branded FVOD - MSO and Auth. Providers/TVE - Apps",
              "PBS Branded FVOD - MSO Only",
              "MVOD",
              "AVOD",
              "Home Entertainment",
              "HV - Physical",
              "HV - Digital",
              "AV - Physical Media",
              "AV - Digital Video",
              "AV - Common Carrier",
              "AV - Site License",
              "AV - Site License No Admission",
              "AV - Site License Admission",
              "AV - AFRTS",
              "Theatrical/Festival",
              "Theatrical",
              "Film Festivals & Awards",
              "Other",
              "Collection/Retransmission",
              "Radio Simulcast",
              "Radio Origination",
              "School Off Air Recording",
              "Demonstration and Exhibition",
              "Clip Rights",
              "Learning Media",
              "Website",
              "Mobile Apps/Interactive",
              "Advertising and Promotion",
              "Merchandising",
              "Publishing: eBook and Print",
              "Music Rights",
              "Audio Streaming",
              "All Rights"
            ],
            "errorMessage": {
              "type": "items must be a String",
              "enum": "items must be one of the given values - Television, Linear,Linear Streaming,Linear Streaming -- Non-Commercial,Linear Streaming -- Commercial,Broadcast,Broadcast -- Non-Commercial,Broadcast -- Commercial,Linear TV -- Pay,Linear TV -- Pay Premium,Digital Multicast Distribution,Audio Visual/Education/Non-Theatrical,FVOD,FVOD - All Sites/Services,FVOD - Streaming (Internet),FVOD - MSO and Auth. Providers/TVE - Apps,FVOD - MSO only,FVOD - PBS Branded Services,PBS Branded - FVOD - Streaming (Internet),PBS Branded FVOD - MSO and Auth. Providers/TVE - Apps,PBS Branded FVOD - MSO Only,MVOD,AVOD,Home Entertainment,HV - Physical,HV - Digital,AV - Physical Media,AV - Digital Video,AV - Common Carrier,AV - Site License,AV - Site License No Admission,AV - Site License Admission,AV - AFRTS,Theatrical/Festival,Theatrical,Film Festivals & Awards,Other,Collection/Retransmission,Radio Simulcast,Radio Origination,School Off Air Recording,Demonstration and Exhibition,Clip Rights,Learning Media,Website,Mobile Apps/Interactive,Advertising and Promotion,Merchandising,Publishing: eBook and Print,Music Rights,Audio Streaming or All Rights"
            }
          }
        },
        "MaximumExploitation": {
          "pattern": "^(.*)$",
          "type": "string",
          "errorMessage": {
            "type": "MaximumExploitation must be a String"
          }
        },
        "Calculated": {
          "type": "boolean",
          "errorMessage": {
            "type": "Calculated must be a Boolean"
          }
        },
        "UnitType": {
          "transform": [
            "trim",
            "toEnumCase"
          ],
          "enum": [
            "Years",
            "Months",
            "Weeks",
            "Days",
            "Hours",
            "Minutes",
            null
          ],
          "errorMessage": {
            "type": "UnitType must be a String",
            "enum": "UnitType must be one of the given values - Years, Months, Weeks, Days, Hours or Minutes"
          }
        },
        "Type": {
          "transform": [
            "trim",
            "toEnumCase"
          ],
          "enum": [
            "Holdback",
            "Catch-up Rights",
            "Archive",
            "Aggregate Days",
            null
          ],
          "errorMessage": {
            "type": "Type must be a String",
            "enum": "Type must be one of the given values - Holdback, Catch-up Rights, Archive or Aggregate Days"
          }
        },
        "GeospatialNamedArea": {
          "type": "array",
          "errorMessage": {
            "type": "GeospatialNamedArea must be an Array"
          },
          "items": {
            "transform": [
              "trim",
              "toEnumCase"
            ],
            "type": "string",
            "enum": [
              "Canada",
              "Caribbean",
              "North America",
              "Puerto Rico",
              "U.S. Virgin Islands",
              "Baker Island",
              "Caroline Islands",
              "Guam",
              "Marshall Islands",
              "Samoa (American)",
              "Wake Island",
              "Northern Marianas",
              "US Consulates",
              "US Consulates, US Military Bases, Embassies",
              "US Ships at Sea",
              "United States of America and its Territories & Possessions",
              "United States of America",
              "Worldwide",
              "Africa",
              "Asia",
              "Latin America",
              "Middle East",
              "Oceania",
              "Europe",
              "Abkhazia, Republic of",
              "Albania",
              "Alto Adige (Bolzano or South Tyrol)",
              "Andorra, Principality of",
              "Austria",
              "Armenia",
              "Azerbaijan",
              "Belarus",
              "Benelux, The",
              "Bosnia / Herzegovina",
              "Bulgaria",
              "Capo d 'Istria",
              "Croatia",
              "Cyprus",
              "Czech Republic",
              "Estonia",
              "France",
              "Georgia",
              "Germany",
              "Gibraltar",
              "Greece",
              "Hungary",
              "Israel",
              "Italy",
              "Kazakhstan",
              "Kosovo",
              "Kyrgyzstan",
              "Latvia",
              "Liechtenstein",
              "Macedonia",
              "Malta",
              "Moldova",
              "Monaco, Principality of",
              "Montenegro",
              "Poland",
              "Portugal",
              "Romania",
              "Russia",
              "San Marino",
              "Scandinavia",
              "Serbia",
              "Slovakia",
              "Slovenia",
              "South Ossetia",
              "Spain",
              "Switzerland",
              "Tajikistan",
              "Turkey",
              "Turkmenistan",
              "Ukraine",
              "Uzbekistan",
              "Vatican City",
              "Vojvodina"
            ],
            "errorMessage": {
              "type": "item must be a String",
              "enum": "item must be one of the given values - Canada, Caribbean, North America, Puerto Rico, U.S. Virgin Islands, Baker Island, Caroline Islands, Guam, Marshall Islands, Samoa (American), Wake Island, Northern Marianas, US Consulates, US Consulates, US Military Bases, Embassies, US Ships at Sea, United States of America and its Territories & Possessions, United States of America, Worldwide, Africa, Asia, Latin America, Middle East, Oceania, Europe, 'Abkhazia, Republic of', Albania, Alto Adige (Bolzano or South Tyrol), 'Andorra, Principality of, Austria', Armenia, Azerbaijan, Belarus, Benelux, The, Bosnia / Herzegovina, Bulgaria, Capo d 'Istria, Croatia, Cyprus, Czech Republic, Estonia, France, Georgia, Germany, Gibraltar, Greece, Hungary, Israel, Italy, Kazakhstan, Kosovo, Kyrgyzstan, Latvia, Liechtenstein, Macedonia, Malta, Moldova, 'Monaco, Principality of', Montenegro, Poland, Portugal, Romania, Russia, San Marino, Scandinavia, Serbia, Slovakia, Slovenia, South Ossetia, Spain, Switzerland, Tajikistan, Turkey, Turkmenistan, Ukraine, Uzbekistan, Vatican City or Vojvodina"
            }
          }
        },
        "EnsureExclusivity": {
          "type": "boolean",
          "errorMessage": {
            "type": "EnsureExclusivity must be a Boolean"
          }
        },
        "Count": {
          "type": "integer",
          "format": "int32",
          "errorMessage": {
            "type": "Count must be an Integer",
            "format": "Count must be in format int32"
          }
        },
        "TermStartDate": {
          "pattern": "^(.*)$",
          "type": "string",
          "errorMessage": {
            "type": "TermStartDate must be a String"
          }
        },
        "TermEndDate": {
          "pattern": "^(.*)$",
          "type": "string",
          "errorMessage": {
            "type": "TermEndDate must be a String"
          }
        },
        "LogicalAssetIDList": {
          "type": "array",
          "uniqueItems": true,
          "errorMessage": {
            "type": "LogicalAssetIDList must be an Array",
            "uniqueItems": "LogicalAssetIDList Contains a Duplicate Value"
          },
          "items": {
            "required": [
              "LogicalAssetID"
            ],
            "type": "object",
            "errorMessage": {
              "type": "items should be an object",
              "required": {
                "LogicalAssetID": "LogicalAssetID is Required"
              }
            },
            "properties": {
              "LogicalAssetID": {
                "pattern": "^(.*)$",
                "type": "string",
                "errorMessage": {
                  "type": "LogicalAssetID must be a String"
                }
              }
            }
          }
        },
        "EntryList": {
          "type": "array",
          "uniqueItems": true,
          "errorMessage": {
            "type": "EntryList must be an Array",
            "uniqueItems": "EntryList Contains a Duplicate Value"
          },
          "items": {
            "title": "The Items Schema",
            "required": [
              "EntryClass",
              "EntryUID"
            ],
            "type": "object",
            "errorMessage": {
              "type": "items must be an Object",
              "required": {
                "EntryClass": "EntryClass is Required",
                "EntryUID": "EntryUID is Required"
              }
            },
            "properties": {
              "EntryClass": {
                "pattern": "^(.*)$",
                "type": "string",
                "errorMessage": {
                  "type": "EntryClass must be an String"
                }
              },
              "EntryUID": {
                "pattern": "^(.*)$",
                "type": "string",
                "errorMessage": {
                  "type": "EntryUID must be an String"
                }
              }
            }
          }
        }
      }
    }
  }
}